#!/bin/bash
# remap
# Remaps the keyboard from arrowkeys to WASD/IJKL/NumPad
# Usage: remap -w => remaps to WASD
# Usage: remap -i => remaps to IJKL
# Usage: remap -n => remaps to NumPad
# Usage: remap [NO OPTION] reverts to normal layout

date="20 July 2021"
auth="Murray L. Estes"
verno="0.1.1"
file="/tmp/remap_state.dat"
wasd=0
npad=0
ijkl=0
norm=0
refresh=0

if [ ! -f $file ]
then
	old_remap_state="ARROW_KEYS"	
else
	old_remap_state=$(cat $file)
fi

let argcnt=0
while getopts ":drhiwnvs" opts
do
	case ${opts} in
		h) echo 'remap: Remaps arrow keys to other configurations'
		   echo 'Use only one option'
		   echo 'Usage: remap [OPTION]'
		   echo '       -d: normal mapping'
		   echo '       -w: WASD mapping'
		   echo '       -i: IJKL mapping'
		   echo '       -n: NumPad mapping'
		   echo '       -s: current mapping'
		   echo '       -r: refreshes current mapping'
		   echo '       -h: this help'
		   echo '       -v: version'
		   exit 0
		   ;;
		i) ijkl=1
			;;
		w) wasd=1
			;;
		n) npad=1
			;;
		d) norm=1
			;;
		r) refresh=1
			;;
		s) if [ -f $file ]
		   then
		   	echo Mapping is currently $old_remap_state
		   	exit 0
		   else
			echo Mapping is currently ARROW_KEYS
			exit 0
		   fi
			;;
		v) echo remap version $verno
		   echo Author: $auth
	   	   echo Last modified: $date
		   exit 0
		   ;;	   
		\?) echo Usage error: Invalid option passed
		    echo Use \'remap -h\' for more information
		    exit 1
			;;
	esac
	let argcnt++
done
shift $((OPTIND - 1))

if [ $argcnt -ne 1 ]
then
	echo Usage error: Option missing
	echo Use \'remap -h\' for more information
	exit 1
fi

if [ $refresh -eq 1 ]
then
	if [ "$old_remap_state" = "NUMPAD_8456" ]
	then
		npad=1
	elif [ "$old_remap_state" = "WASD" ]
	then
		wasd=1
	elif [ "$old_remap_state" = "IJKL" ]
	then
		ijkl=1
	else
		norm=1
	fi
fi

if [ $refresh -eq 0 -a "$old_remap_state" != "ARROW_KEYS" ]
then
	#revert to normal mapping, needed even if changing mapping
	xmodmap -e "keycode 25 = w W w W lstroke Lstroke"
	xmodmap -e "keycode 38 = a A a A ae AE" 
	xmodmap -e "keycode 39 = s S s S scaron Scaron" 
	xmodmap -e "keycode 40 = d D d D eth ETH" 
	xmodmap -e "keycode 31 = i I i I"
	xmodmap -e "keycode 44 = j J j J"
	xmodmap -e "keycode 45 = k K k K"
	xmodmap -e "keycode 46 = l L l L"
	xmodmap -e "keycode 80 = KP_Up KP_8"
	xmodmap -e "keycode 83 = KP_Left KP_4"
	xmodmap -e "keycode 84 = KP_Begin KP_5"
	xmodmap -e "keycode 85 = KP_Right KP_6"
fi

if [ $norm -eq 1 ]
then
	remap_state="ARROW_KEYS"
fi

if [ $wasd -eq 1 ]
then
	xmodmap -e "keycode 25 = Up"    # w => Up
	xmodmap -e "keycode 38 = Left"  # a => Left
	xmodmap -e "keycode 39 = Down"  # s => Down
	xmodmap -e "keycode 40 = Right" # d => Right
	remap_state="WASD"
fi

if [ $npad -eq 1 ]
then
	xmodmap -e "keycode 80 = Up"    # Num8 => Up
	xmodmap -e "keycode 83 = Left"  # Num4 => Left
	xmodmap -e "keycode 84 = Down"  # Num5 => Down
	xmodmap -e "keycode 85 = Right" # Num6 => Right
	remap_state="NUMPAD_8456"
fi

if [ $ijkl -eq 1 ]
then
	xmodmap -e "keycode 31 = Up"    # i => Up
	xmodmap -e "keycode 44 = Left"  # j => Left
	xmodmap -e "keycode 45 = Down"  # k => Down
	xmodmap -e "keycode 46 = Right" # l => Right
	remap_state="IJKL"
fi

if [ "$remap_state" = "ARROW_KEYS" ]
then
	rm -f $file
else
	echo "$remap_state" > $file
fi

if [ $refresh -eq 0 ]
then
	echo "$old_remap_state => $remap_state"
else
	echo "State $remap_state refreshed"
fi
